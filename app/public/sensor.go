/*
 *
 * Copyright 2018 huayuan-iot
 *
 * Author: lynn
 * Date: 2018/09/20
 * Despcription: element library difinition
 *
 */

package public

// SensorRGB sensorflow rgb struct
type SensorRGB struct {
	Red   int `json:"r"`
	Green int `json:"g"`
	Blue  int `json:"b"`
}

// SensorLEDParameter sensorflow led parameter
type SensorLEDParameter struct {
	U1 SensorRGB `json:"u-1"`
	U2 SensorRGB `json:"u-2"`
	U3 SensorRGB `json:"u-3"`
	U4 SensorRGB `json:"u-4"`
	U5 SensorRGB `json:"u-5"`
	U6 SensorRGB `json:"u-6"`

	U7  SensorRGB `json:"u-7"`
	U8  SensorRGB `json:"u-8"`
	U9  SensorRGB `json:"u-9"`
	U10 SensorRGB `json:"u-10"`
	U11 SensorRGB `json:"u-11"`
	U12 SensorRGB `json:"u-12"`

	U13 SensorRGB `json:"u-13"`
	U14 SensorRGB `json:"u-14"`
	U15 SensorRGB `json:"u-15"`
	U16 SensorRGB `json:"u-16"`
	U17 SensorRGB `json:"u-17"`
	U18 SensorRGB `json:"u-18"`

	U19 SensorRGB `json:"u-19"`
	U20 SensorRGB `json:"u-20"`
	U21 SensorRGB `json:"u-21"`
	U22 SensorRGB `json:"u-22"`
	U23 SensorRGB `json:"u-23"`
	U24 SensorRGB `json:"u-24"`

	U25 SensorRGB `json:"u-25"`
	U26 SensorRGB `json:"u-26"`
	U27 SensorRGB `json:"u-27"`
	U28 SensorRGB `json:"u-28"`
	U29 SensorRGB `json:"u-29"`
	U30 SensorRGB `json:"u-30"`

	U31 SensorRGB `json:"u-31"`
	U32 SensorRGB `json:"u-32"`
	U33 SensorRGB `json:"u-33"`
	U34 SensorRGB `json:"u-34"`
	U35 SensorRGB `json:"u-35"`
	U36 SensorRGB `json:"u-36"`

	U37 SensorRGB `json:"u-37"`
	U38 SensorRGB `json:"u-38"`
	U39 SensorRGB `json:"u-39"`
	U40 SensorRGB `json:"u-40"`
	U41 SensorRGB `json:"u-41"`
	U42 SensorRGB `json:"u-42"`

	U43 SensorRGB `json:"u-43"`
	U44 SensorRGB `json:"u-44"`
	U45 SensorRGB `json:"u-45"`
	U46 SensorRGB `json:"u-46"`
	U47 SensorRGB `json:"u-47"`
	U48 SensorRGB `json:"u-48"`
}

// SensorData sensorflow data
type SensorData struct {
	UIndex int    `json:"u"`
	LED    string `json:"led"`
	Button int    `json:"button"`
	Tag    struct {
		State        int     `json:"state"`
		Type         int     `json:"type,omitempty"`
		Asset        string  `json:"asset,omitempty"`
		LED          string  `json:"led,omitempty"`
		Temperature  float64 `json:"temperature,omitempty"`
		Vibration    int     `json:"vibration,omitempty"`
		Button       int     `json:"button,omitempty"`
		TemperatureP float64 `json:"temperature-p,omitempty"`
		Humidity     float64 `json:"humidity,omitempty"`
		Door         int     `json:"door,omitempty"`
		Do           int     `json:"do,omitempty"`
		PT100        float64 `json:"pt100,omitempty"`
		Electricity  float64 `json:"electricity,omitempty"`
		Voltage      float64 `json:"voltage,omitempty"`
	} `json:"tag"`
}

// SensorSync sensorflow sync
type SensorSync struct {
	ID      string       `json:"id"`
	Version string       `json:"version"`
	Modules int          `json:"modules"`
	UCount  int          `json:"ucount"`
	US      []SensorData `json:"us"`
}

// const
const (
	SensorCommandModeSync = "sync"
)

var tablePT100 = []uint{
	1852,
	1895, 1938, 1982, 2025, 2068, 2111, 2154, 2197, 2240, 2283,
	2325, 2368, 2411, 2454, 2497, 2539, 2582, 2624, 2667, 2710,
	2752, 2795, 2837, 2880, 2922, 2964, 3007, 3049, 3091, 3134,
	3176, 3218, 3260, 3302, 3344, 3386, 3428, 3470, 3512, 3554,
	3596, 3638, 3680, 3722, 3764, 3805, 3847, 3889, 3931, 3972,
	4014, 4056, 4097, 4139, 4180, 4222, 4263, 4305, 4346, 4388,
	4429, 4470, 4512, 4553, 4594, 4636, 4677, 4718, 4759, 4800,
	4842, 4883, 4924, 4965, 5006, 5047, 5088, 5129, 5170, 5211,
	5252, 5293, 5334, 5375, 5415, 5456, 5497, 5538, 5579, 5619,
	5660, 5701, 5741, 5782, 5823, 5863, 5904, 5944, 5985, 6026,
	6066, 6107, 6147, 6188, 6228, 6268, 6309, 6349, 6390, 6430,
	6470, 6511, 6551, 6591, 6631, 6672, 6712, 6752, 6792, 6833,
	6873, 6913, 6953, 6993, 7033, 7073, 7113, 7153, 7193, 7233,
	7273, 7313, 7353, 7393, 7433, 7473, 7513, 7553, 7593, 7633,
	7673, 7712, 7752, 7792, 7832, 7872, 7911, 7951, 7991, 8031,
	8070, 8110, 8150, 8189, 8229, 8269, 8308, 8348, 8387, 8427,
	8467, 8506, 8546, 8585, 8625, 8664, 8704, 8743, 8783, 8822,
	8862, 8901, 8940, 8980, 9019, 9059, 9098, 9137, 9177, 9216,
	9255, 9295, 9334, 9373, 9412, 9452, 9491, 9530, 9569, 9609,
	9648, 9687, 9726, 9765, 9804, 9844, 9883, 9922, 9961,
	10000, 10039, 10078, 10117, 10156, 10195, 10234, 10273, 10312, 10351,
	10390, 10429, 10468, 10507, 10546, 10585, 10624, 10663, 10702, 10740,
	10779, 10818, 10857, 10896, 10935, 10973, 11012, 11051, 11090, 11129,
	11167, 11206, 11245, 11283, 11322, 11361, 11400, 11438, 11477, 11515,
	11554, 11593, 11631, 11670, 11708, 11747, 11786, 11824, 11863, 11901,
	11940, 11978, 12017, 12055, 12094, 12132, 12171, 12209, 12247, 12286,
	12324, 12363, 12401, 12439, 12478, 12516, 12554, 12593, 12631, 12669,
	12708, 12746, 12784, 12822, 12861, 12899, 12937, 12975, 13013, 13052,
	13090, 13128, 13166, 13204, 13242, 13280, 13318, 13357, 13395, 13433,
	13471, 13509, 13547, 13585, 13623, 13661, 13699, 13737, 13775, 13813,
	13851, 13888, 13926, 13964, 14002, 14040, 14078, 14116, 14154, 14191,
	14229, 14267, 14305, 14343, 14380, 14418, 14456, 14494, 14531, 14569,
	14607, 14644, 14682, 14720, 14757, 14795, 14833, 14870, 14908, 14946,
	14983, 15021, 15058, 15096, 15133, 15171, 15208, 15246, 15283, 15321,
	15358, 15396, 15433, 15471, 15508, 15546, 15583, 15620, 15658, 15695,
	15733, 15770, 15807, 15845, 15882, 15919, 15956, 15994, 16031, 16068,
	16105, 16143, 16180, 16217, 16254, 16291, 16329, 16366, 16403, 16440,
	16477, 16514, 16551, 16589, 16626, 16663, 16700, 16737, 16774, 16811,
	16848, 16885, 16922, 16959, 16996, 17033, 17070, 17107, 17143, 17180,
	17217, 17254, 17291, 17328, 17365, 17402, 17438, 17475, 17512, 17549,
	17586, 17622, 17659, 17696, 17733, 17769, 17806, 17843, 17879, 17916,
	17953, 17989, 18026, 18063, 18099, 18136, 18172, 18209, 18246, 18282,
	18319, 18355, 18392, 18428, 18465, 18501, 18538, 18574, 18611, 18647,
	18684, 18720, 18756, 18793, 18829, 18866, 18902, 18938, 18975, 19011,
	19047, 19084, 19120, 19156, 19192, 19229, 19265, 19301, 19337, 19374,
	19410, 19446, 19482, 19518, 19555, 19591, 19627, 19663, 19699, 19735,
	19771, 19807, 19843, 19879, 19915, 19951, 19987, 20023, 20059, 20095,
	20131, 20167, 20203, 20239, 20275, 20311, 20347, 20383, 20419, 20455,
	20490, 20526, 20562, 20598, 20634, 20670, 20705, 20741, 20777, 20813,
	20848, 20884, 20920, 20956, 20991, 21027, 21063, 21098, 21134, 21170,
	21205, 21241, 21276, 21312, 21348, 21383, 21419, 21454, 21490, 21525,
	21561, 21596, 21632, 21667, 21703, 21738, 21774, 21809, 21844, 21880,
	21915, 21951, 21986, 22021, 22057, 22092, 22127, 22163, 22198, 22233,
	22268, 22304, 22339, 22374, 22409, 22445, 22480, 22515, 22550, 22585,
	22621, 22656, 22691, 22726, 22761, 22796, 22831, 22866, 22902, 22937,
	22972, 23007, 23042, 23077, 23112, 23147, 23182, 23217, 23252, 23287,
	23321, 23356, 23391, 23426, 23461, 23496, 23531, 23566, 23600, 23635,
	23670, 23705, 23740, 23774, 23809, 23844, 23879, 23913, 23948, 23983,
	24018, 24052, 24087, 24122, 24156, 24191, 24226, 24260, 24295, 24329,
	24364, 24399, 24433, 24468, 24502, 24537, 24571, 24606, 24640, 24675,
	24709, 24744, 24778, 24813, 24847, 24881, 24916, 24950, 24585, 25019,
	25053, 25088, 25122, 25156, 25191, 25225, 25259, 25293, 25328, 25362,
	25396, 25430, 25465, 25499, 25533, 25567, 25601, 25635, 25670, 25704,
	25738, 25772, 25806, 25840, 25874, 25908, 25942, 25976, 26010, 26044,
	26078, 26112, 26146, 26180, 26214, 26248, 26282, 26316, 26350, 26384,
	26418, 26452, 26486, 26520, 26553, 26587, 26621, 26655, 26689, 26722,
	26756, 26790, 26824, 26857, 26891, 26925, 26959, 26992, 27026, 27060,
	27093, 27127, 27161, 27194, 27228, 27261, 27295, 27329, 27362, 27396,
	27429, 27463, 27496, 27530, 27563, 27597, 27630, 27664, 27697, 27731,
	27764, 27798, 27831, 27864, 27898, 27931, 27964, 27998, 28031, 28064,
	28098, 28131, 28164, 28198, 28231, 28264, 28297, 28331, 28364, 28397,
	28430, 28463, 28497, 28530, 28563, 28596, 28629, 28662, 28685, 28729,
	28762, 28795, 28828, 28861, 28894, 28927, 28960, 28993, 29026, 29059,
	29092, 29125, 29158, 29191, 29224, 29256, 29289, 29322, 29355, 29388,
	29421, 29454, 29486, 29519, 29552, 29585, 29618, 29650, 29683, 29716,
	29749, 29781, 29814, 29847, 29880, 29912, 29945, 29978, 30010, 30043,
	30075, 30108, 30141, 30173, 30206, 30238, 30271, 30303, 30336, 30369,
	30401, 30434, 30466, 30498, 30531, 30563, 30596, 30628, 30661, 30693,
	30725, 30758, 30790, 30823, 30855, 30887, 30920, 30952, 30984, 31016,
	31049, 31081, 31113, 31145, 31178, 31210, 31242, 31274, 31306, 31339,
	31371, 31403, 31435, 31467, 31499, 31531, 31564, 31596, 31628, 31660,
	31692, 31724, 31756, 31788, 31820, 31852, 31884, 31916, 31948, 31980,
	32012, 32043, 32075, 32107, 32139, 32171, 32203, 32235, 32267, 32298,
	32330, 32362, 32394, 32426, 32457, 32489, 32521, 32553, 32584, 32616,
	32648, 32679, 32711, 32743, 32774, 32806, 32838, 32869, 32901, 32932,
	32964, 32996, 33027, 33059, 33090, 33122, 33153, 33185, 33216, 33248,
	33279,
}

// PT100 compute PT100 values
/**
V = A*(U1-U2) = A*I*(R1-R2)
V = ADC
A = 39
I = 1.25
R1 = PT100
R2 = set
PT100 = R1 = R2+(V/(A*I))
2.5 / (39*0.00125) = 51.282
R2 = 100   151.282  0--134  = 0--2.5V  0--100 = 0--1.9V
R2 = 78.7  129.982  -54--77 = 0--2.5V
**/
func PT100(d uint, fA, fI, fR2 float64) float64 {
	var td1 float64
	var td2 float64
	var pt100 float64
	var fV float64
	var fR1 float64
	var data uint
	var i uint

	fV = float64(d)
	fV /= 10000
	fV /= (fA * fI)
	fR1 = fR2 + fV

	data = (uint)(fR1 * 100)

	// i = 0:   -200 ℃
	// i = 200:    0 ℃
	// i = 859:  660 ℃
	for i = 0; i < 860; i++ {
		if (data >= tablePT100[i]) && (data <= tablePT100[i+1]) {
			td1 = float64(tablePT100[i+1] - tablePT100[i])
			td2 = float64(tablePT100[i+1] - data)
			td2 /= td1
			if i < 200 {
				td2 *= (-1)
			}
			pt100 = float64(i) - 200 + td2

			break
		}
	}

	return pt100
}

// Electricity electricity
// 4-20 = (120*0.004) 0.48~2.4V
func Electricity(d uint) float64 {
	fd := float64(d)
	fd /= 10
	fd /= 120

	return fd
}

// Voltage voltage
// 10V
// 0~10 = 0~2.5V
func Voltage(d uint) float64 {
	fd := float64(d)
	fd /= 10000
	fd *= 4

	return fd
}
