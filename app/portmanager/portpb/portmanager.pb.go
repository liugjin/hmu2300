// Code generated by protoc-gen-go. DO NOT EDIT.
// source: portmanager.proto

package portpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing operate info.
type OperateRequest struct {
	Port                 string   `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Payload              string   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Suid                 string   `protobuf:"bytes,4,opt,name=suid,proto3" json:"suid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperateRequest) Reset()         { *m = OperateRequest{} }
func (m *OperateRequest) String() string { return proto.CompactTextString(m) }
func (*OperateRequest) ProtoMessage()    {}
func (*OperateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9294b3ff736b2bd6, []int{0}
}

func (m *OperateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperateRequest.Unmarshal(m, b)
}
func (m *OperateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperateRequest.Marshal(b, m, deterministic)
}
func (m *OperateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperateRequest.Merge(m, src)
}
func (m *OperateRequest) XXX_Size() int {
	return xxx_messageInfo_OperateRequest.Size(m)
}
func (m *OperateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OperateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OperateRequest proto.InternalMessageInfo

func (m *OperateRequest) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *OperateRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *OperateRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *OperateRequest) GetSuid() string {
	if m != nil {
		return m.Suid
	}
	return ""
}

// The response message containing sample response
type OperateReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperateReply) Reset()         { *m = OperateReply{} }
func (m *OperateReply) String() string { return proto.CompactTextString(m) }
func (*OperateReply) ProtoMessage()    {}
func (*OperateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_9294b3ff736b2bd6, []int{1}
}

func (m *OperateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperateReply.Unmarshal(m, b)
}
func (m *OperateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperateReply.Marshal(b, m, deterministic)
}
func (m *OperateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperateReply.Merge(m, src)
}
func (m *OperateReply) XXX_Size() int {
	return xxx_messageInfo_OperateReply.Size(m)
}
func (m *OperateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OperateReply.DiscardUnknown(m)
}

var xxx_messageInfo_OperateReply proto.InternalMessageInfo

func (m *OperateReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *OperateReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *OperateReply) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// The request message containing binding port info.
type BindingRequest struct {
	Protocol             string   `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Payload              string   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Suid                 string   `protobuf:"bytes,4,opt,name=suid,proto3" json:"suid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BindingRequest) Reset()         { *m = BindingRequest{} }
func (m *BindingRequest) String() string { return proto.CompactTextString(m) }
func (*BindingRequest) ProtoMessage()    {}
func (*BindingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9294b3ff736b2bd6, []int{2}
}

func (m *BindingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BindingRequest.Unmarshal(m, b)
}
func (m *BindingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BindingRequest.Marshal(b, m, deterministic)
}
func (m *BindingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindingRequest.Merge(m, src)
}
func (m *BindingRequest) XXX_Size() int {
	return xxx_messageInfo_BindingRequest.Size(m)
}
func (m *BindingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BindingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BindingRequest proto.InternalMessageInfo

func (m *BindingRequest) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *BindingRequest) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *BindingRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *BindingRequest) GetSuid() string {
	if m != nil {
		return m.Suid
	}
	return ""
}

// The response message containing binding port response
type BindingReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BindingReply) Reset()         { *m = BindingReply{} }
func (m *BindingReply) String() string { return proto.CompactTextString(m) }
func (*BindingReply) ProtoMessage()    {}
func (*BindingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_9294b3ff736b2bd6, []int{3}
}

func (m *BindingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BindingReply.Unmarshal(m, b)
}
func (m *BindingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BindingReply.Marshal(b, m, deterministic)
}
func (m *BindingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindingReply.Merge(m, src)
}
func (m *BindingReply) XXX_Size() int {
	return xxx_messageInfo_BindingReply.Size(m)
}
func (m *BindingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BindingReply.DiscardUnknown(m)
}

var xxx_messageInfo_BindingReply proto.InternalMessageInfo

func (m *BindingReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BindingReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The request message containing release port info.
type ReleaseRequest struct {
	Protocol             string   `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Payload              string   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Suid                 string   `protobuf:"bytes,4,opt,name=suid,proto3" json:"suid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseRequest) Reset()         { *m = ReleaseRequest{} }
func (m *ReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseRequest) ProtoMessage()    {}
func (*ReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9294b3ff736b2bd6, []int{4}
}

func (m *ReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseRequest.Unmarshal(m, b)
}
func (m *ReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseRequest.Merge(m, src)
}
func (m *ReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseRequest.Size(m)
}
func (m *ReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseRequest proto.InternalMessageInfo

func (m *ReleaseRequest) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *ReleaseRequest) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *ReleaseRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *ReleaseRequest) GetSuid() string {
	if m != nil {
		return m.Suid
	}
	return ""
}

// The response message containing release port response
type ReleaseReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseReply) Reset()         { *m = ReleaseReply{} }
func (m *ReleaseReply) String() string { return proto.CompactTextString(m) }
func (*ReleaseReply) ProtoMessage()    {}
func (*ReleaseReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_9294b3ff736b2bd6, []int{5}
}

func (m *ReleaseReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseReply.Unmarshal(m, b)
}
func (m *ReleaseReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseReply.Marshal(b, m, deterministic)
}
func (m *ReleaseReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseReply.Merge(m, src)
}
func (m *ReleaseReply) XXX_Size() int {
	return xxx_messageInfo_ReleaseReply.Size(m)
}
func (m *ReleaseReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseReply proto.InternalMessageInfo

func (m *ReleaseReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReleaseReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*OperateRequest)(nil), "portpb.OperateRequest")
	proto.RegisterType((*OperateReply)(nil), "portpb.OperateReply")
	proto.RegisterType((*BindingRequest)(nil), "portpb.BindingRequest")
	proto.RegisterType((*BindingReply)(nil), "portpb.BindingReply")
	proto.RegisterType((*ReleaseRequest)(nil), "portpb.ReleaseRequest")
	proto.RegisterType((*ReleaseReply)(nil), "portpb.ReleaseReply")
}

func init() { proto.RegisterFile("portmanager.proto", fileDescriptor_9294b3ff736b2bd6) }

var fileDescriptor_9294b3ff736b2bd6 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x52, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x6d, 0x4a, 0x48, 0xe1, 0x54, 0x55, 0xc2, 0x42, 0x55, 0xd4, 0x09, 0x65, 0x62, 0xca, 0x00,
	0x13, 0x1b, 0xe2, 0x07, 0x40, 0x11, 0x3f, 0x70, 0x25, 0x47, 0x14, 0xc9, 0x8d, 0x4d, 0xec, 0x0c,
	0xf9, 0x32, 0x7e, 0x0f, 0x9d, 0xe3, 0x38, 0x89, 0x98, 0xe8, 0xc0, 0x76, 0xf7, 0xec, 0xe7, 0x77,
	0xef, 0xf9, 0xe0, 0x46, 0xab, 0xd6, 0x9e, 0xb0, 0xc1, 0x8a, 0xda, 0x5c, 0xb7, 0xca, 0x2a, 0x91,
	0x30, 0xa4, 0x8f, 0xd9, 0x27, 0xec, 0x5e, 0x35, 0xb5, 0x68, 0xa9, 0xa0, 0xaf, 0x8e, 0x8c, 0x15,
	0x02, 0x62, 0x3e, 0x4b, 0xa3, 0xbb, 0xe8, 0xfe, 0xba, 0x70, 0x35, 0x63, 0xb6, 0xd7, 0x94, 0xae,
	0x07, 0x8c, 0x6b, 0x91, 0xc2, 0x46, 0x63, 0x2f, 0x15, 0x96, 0xe9, 0x85, 0x83, 0xc7, 0x96, 0x6f,
	0x9b, 0xae, 0x2e, 0xd3, 0x78, 0xb8, 0xcd, 0x75, 0xf6, 0x0e, 0xdb, 0xa0, 0xa3, 0x65, 0x2f, 0xf6,
	0x90, 0x18, 0x8b, 0xb6, 0x33, 0x4e, 0xe7, 0xb2, 0xf0, 0x1d, 0xbf, 0x7a, 0x22, 0x63, 0xb0, 0x1a,
	0xc5, 0xc6, 0x96, 0x5f, 0x2d, 0xd1, 0xa2, 0x17, 0x73, 0x75, 0xd6, 0xc0, 0xee, 0xa5, 0x6e, 0xca,
	0xba, 0xa9, 0xc6, 0xe9, 0x0f, 0x70, 0xe5, 0x0c, 0x7e, 0x28, 0xe9, 0x1d, 0x84, 0x3e, 0x38, 0x5b,
	0xcf, 0x9c, 0xfd, 0xcd, 0xc5, 0x33, 0x6c, 0x83, 0xde, 0x59, 0x2e, 0x78, 0xe2, 0x82, 0x24, 0xa1,
	0xa1, 0x7f, 0x9b, 0x38, 0xe8, 0x9d, 0x35, 0xf1, 0xc3, 0x77, 0x04, 0xf1, 0x1b, 0x0b, 0x3f, 0xc1,
	0xc6, 0x7f, 0xa1, 0xd8, 0xe7, 0xc3, 0xfa, 0xe4, 0xcb, 0xdd, 0x39, 0xdc, 0xfe, 0xc2, 0xb5, 0xec,
	0xb3, 0x15, 0x53, 0x7d, 0x6e, 0x13, 0x75, 0xf9, 0x71, 0x13, 0x75, 0x1e, 0xf0, 0x40, 0xf5, 0x06,
	0x26, 0xea, 0x32, 0xc1, 0x89, 0x3a, 0x77, 0x9a, 0xad, 0x8e, 0x89, 0xcb, 0xf1, 0xf1, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x96, 0xa9, 0x93, 0xf8, 0xff, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PortClient is the client API for Port service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortClient interface {
	// Operate operate devices, including sample, command
	Operate(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (*OperateReply, error)
	// Binding binding port
	Binding(ctx context.Context, in *BindingRequest, opts ...grpc.CallOption) (*BindingReply, error)
	// Release release port
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseReply, error)
}

type portClient struct {
	cc *grpc.ClientConn
}

func NewPortClient(cc *grpc.ClientConn) PortClient {
	return &portClient{cc}
}

func (c *portClient) Operate(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (*OperateReply, error) {
	out := new(OperateReply)
	err := c.cc.Invoke(ctx, "/portpb.Port/Operate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) Binding(ctx context.Context, in *BindingRequest, opts ...grpc.CallOption) (*BindingReply, error) {
	out := new(BindingReply)
	err := c.cc.Invoke(ctx, "/portpb.Port/Binding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseReply, error) {
	out := new(ReleaseReply)
	err := c.cc.Invoke(ctx, "/portpb.Port/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServer is the server API for Port service.
type PortServer interface {
	// Operate operate devices, including sample, command
	Operate(context.Context, *OperateRequest) (*OperateReply, error)
	// Binding binding port
	Binding(context.Context, *BindingRequest) (*BindingReply, error)
	// Release release port
	Release(context.Context, *ReleaseRequest) (*ReleaseReply, error)
}

// UnimplementedPortServer can be embedded to have forward compatible implementations.
type UnimplementedPortServer struct {
}

func (*UnimplementedPortServer) Operate(ctx context.Context, req *OperateRequest) (*OperateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Operate not implemented")
}
func (*UnimplementedPortServer) Binding(ctx context.Context, req *BindingRequest) (*BindingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Binding not implemented")
}
func (*UnimplementedPortServer) Release(ctx context.Context, req *ReleaseRequest) (*ReleaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}

func RegisterPortServer(s *grpc.Server, srv PortServer) {
	s.RegisterService(&_Port_serviceDesc, srv)
}

func _Port_Operate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).Operate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portpb.Port/Operate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).Operate(ctx, req.(*OperateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_Binding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).Binding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portpb.Port/Binding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).Binding(ctx, req.(*BindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portpb.Port/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).Release(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Port_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portpb.Port",
	HandlerType: (*PortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Operate",
			Handler:    _Port_Operate_Handler,
		},
		{
			MethodName: "Binding",
			Handler:    _Port_Binding_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _Port_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portmanager.proto",
}
